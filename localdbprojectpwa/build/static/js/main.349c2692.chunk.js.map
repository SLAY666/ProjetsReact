{"version":3,"sources":["img/pwa.png","components/BoutonInstallPWA.js","components/DemoJSONLocal.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","BoutonInstallPWA","Button","variant","size","block","id","DemoJSONLocal","json","require","readPokemon","pokemon","console","log","pokemons","forEach","push","i","length","name","test","App","className","src","logo","alt","width","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"2GAAAA,EAAOC,QAAU,IAA0B,iC,+kBCY5BC,MARf,WACE,OACE,kBAACC,EAAA,EAAD,CAAQC,QAAQ,UAAUC,KAAK,KAAKC,OAAK,EAACC,GAAG,iBAA7C,4BC8DWC,MAlEf,WAEE,OAKF,WAEE,IAAIC,EAAOC,EAAQ,IAMjB,SAASC,EAAYC,GACnBC,QAAQC,IAAIF,GALdC,QAAQC,IAAI,YAEZL,EAAKM,SAASC,QAAQL,GAQtBF,EAAKM,SAASE,KACZ,CACA,GAAM,EACN,KAAQ,QACR,QAAW,oFACX,UAAa,CACX,CACE,KAAQ,WAEV,CACE,KAAQ,oBAKdJ,QAAQC,IAAI,WACZL,EAAKM,SAASC,QAAQL,GAItB,IAAK,IAAIO,EAAI,EAAGA,EAAIT,EAAKM,SAASI,OAAQD,IACxC,GAA4B,IAAxBT,EAAKM,SAASG,GAAGX,GAAU,CAC7BE,EAAKM,SAASG,GAAGE,KAAO,cACxB,MAGJP,QAAQC,IAAI,YACZL,EAAKM,SAASC,QAAQL,GAGtB,IAASO,EAAI,EAAGA,EAAIT,EAAKM,SAASI,QACJ,IAAxBV,EAAKM,SAASG,GAAGX,GADmBW,KAM1CL,QAAQC,IAAI,cACZL,EAAKM,SAASC,QAAQL,GAzDtBU,GAEA,mD,MCgBWC,MAff,WACE,OACE,yBAAKC,UAAU,OACb,kBAAC,EAAD,MACA,4BAAQA,UAAU,cAChB,yBAAKC,IAAKC,IAAMF,UAAU,WAAWG,IAAI,OAAOC,MAAM,SAASC,OAAO,WACtE,gDAIF,kBAAC,EAAD,QCJAC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BnC,QAAQC,IACN,iHAKEuB,GAAUA,EAAOY,UACnBZ,EAAOY,SAASP,KAMlB7B,QAAQC,IAAI,sCAGRuB,GAAUA,EAAOa,WACnBb,EAAOa,UAAUR,WAO5BS,OAAM,SAAAC,GACLvC,QAAQuC,MAAM,4CAA6CA,M,MCzFjEC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDWnB,SAAkBpB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIoB,IAAIC,IAAwB5B,OAAOC,SAAS4B,MACpDC,SAAW9B,OAAOC,SAAS6B,OAIvC,OAGF9B,OAAO+B,iBAAiB,QAAQ,WAC9B,IAAM1B,EAAK,UAAMuB,IAAN,sBAEP9B,IAgEV,SAAiCO,EAAOC,GAEtC0B,MAAM3B,EAAO,CACX4B,QAAS,CAAE,iBAAkB,YAE5BvB,MAAK,SAAAwB,GAEJ,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5C/B,UAAUC,cAAc+B,MAAM7B,MAAK,SAAAC,GACjCA,EAAa6B,aAAa9B,MAAK,WAC7BV,OAAOC,SAASwC,eAKpBrC,EAAgBC,EAAOC,MAG1Bc,OAAM,WACLtC,QAAQC,IACN,oEAvFA2D,CAAwBrC,EAAOC,GAI/BC,UAAUC,cAAc+B,MAAM7B,MAAK,WACjC5B,QAAQC,IACN,iHAMJqB,EAAgBC,EAAOC,OCjC/BE,K","file":"static/js/main.349c2692.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pwa.3abe438f.png\";","import React, { useState, useEffect } from \"react\";\r\nimport Button from 'react-bootstrap/Button';  \r\n\r\n\r\nfunction BoutonInstallPWA() {\r\n  return (\r\n    <Button variant=\"primary\" size=\"lg\" block id=\"boutonInstall\">\r\n      Installer l'application\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport default BoutonInstallPWA;\r\n","import React from \"react\";\r\n\r\nfunction DemoJSONLocal() {\r\n    test();\r\n  return (\r\n    <h1>Liste des pokemons</h1>\r\n  );\r\n}\r\n\r\nfunction test(){\r\n  //OUVERTURE DE LA BD  \r\n  let json = require('../localDB/db.json');\r\n\r\n    console.log(\"AFFICHER\"); \r\n    //READ, on pourrait aussi prendre un for traditionnel comme en bas\r\n    json.pokemons.forEach(readPokemon);\r\n\r\n    function readPokemon(pokemon) {\r\n      console.log(pokemon);\r\n    }\r\n\r\n    \r\n    //AJOUT\r\n    json.pokemons.push(\r\n      {\r\n      \"id\": 3,\r\n      \"name\": \"Shany\",\r\n      \"picture\": \"https://cdn.bulbagarden.net/upload/thumb/0/0d/025Pikachu.png/500px-025Pikachu.png\",\r\n      \"abilities\": [\r\n        {\r\n          \"name\": \"Statics\"\r\n        },\r\n        {\r\n          \"name\": \"Lightning Rod\"\r\n        }\r\n      ]\r\n    });\r\n    \r\n    console.log(\"AJOUTER\"); \r\n    json.pokemons.forEach(readPokemon);\r\n\r\n\r\n    //MODIFIER\r\n    for (var i = 0; i < json.pokemons.length; i++) {\r\n      if (json.pokemons[i].id === 3) {\r\n        json.pokemons[i].name = \"Shany Carle\";\r\n        break;\r\n      }\r\n    }\r\n    console.log(\"MODIFIER\"); \r\n    json.pokemons.forEach(readPokemon);\r\n\r\n    //SUPRESSION\r\n    for (var i = 0; i < json.pokemons.length; i++) {\r\n      if (json.pokemons[i].id === 3) {\r\n        //json.pokemons.splice(i);\r\n        break;\r\n      }\r\n    }\r\n    console.log(\"SUPRESSION\"); \r\n    json.pokemons.forEach(readPokemon);\r\n\r\n    //Le problème avec cette approche est que c'est non persistant. Les sécurités des navigateurs ne permettent pas d'écrire dans un fichier côté client.\r\n    \r\n}\r\n\r\n\r\n\r\nexport default DemoJSONLocal;","import React from 'react';\r\nimport logo from './img/pwa.png';\r\nimport BoutonInstallPWA from './components/BoutonInstallPWA';\r\nimport DemoJSONLocal from './components/DemoJSONLocal';\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <BoutonInstallPWA/>\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" width=\"400 px\" height=\"100 px\"/>\r\n        <p>\r\n          Hello PWA World!\r\n        </p>\r\n      </header>\r\n      <DemoJSONLocal/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n      \r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}